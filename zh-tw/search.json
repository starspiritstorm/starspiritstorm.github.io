[{"categories":["MSSQL"],"content":"拆分分隔符號變成多筆row\n我是用下面的關鍵字去 google 的\nsql separate string by comma into rows  找到第一筆 stackoverflow\n同篇文章有兩種寫法\n一種寫法是在 MSSQL 2016 之前的寫法，CTE 遞迴方法\n一種寫法是在 MSSQL 2016 之後的寫法，有內建 function，STRING_SPLIT\n還有 performance 的比較\n結論，MSSQL 2016 之後版本的人就乖乖用 STRING_SPLIT 吧..\nCTE 遞迴方法拆分 strings -- a sample temp table DECLARE @temp_origin TABLE ( ID INT , input_date DATETIME , name VARCHAR(50) ) INSERT INTO @temp_origin SELECT 1, '2021-05-05', 'Adam,Gray,Jacy' UNION SELECT 2, '2021-05-08', 'Henry,Alice' UNION SELECT 3, '2021-05-15', 'Ben' DECLARE @split_character VARCHAR(10) SET @split_character = ',' ;WITH split_temp(ID, input_date, splitted_name, step_by_step_to_split, origin_concatenated_name) AS ( SELECT ID , input_date , CAST ( LEFT(name, CHARINDEX(@split_character, name + @split_character) - 1) AS VARCHAR(200)) , STUFF(name, 1, CHARINDEX(@split_character, name + @split_character), '') , name FROM @temp_origin -- CTE 遞迴拆分名字 UNION all SELECT ID , input_date , CAST ( LEFT(step_by_step_to_split, CHARINDEX(@split_character, step_by_step_to_split + @split_character) - 1) AS VARCHAR(200)) , STUFF(step_by_step_to_split, 1, CHARINDEX(@split_character, step_by_step_to_split + @split_character), '') , origin_concatenated_name FROM split_temp WHERE step_by_step_to_split \u003e '' ) SELECT ID , input_date , splitted_name , step_by_step_to_split , origin_concatenated_name FROM split_temp ORDER BY ID -- OPTION (maxrecursion 0) -- 通常 CTE 遞迴次數限制為100次，如果你知道你的 string 有這麼長，記得把 option 反註解掉 /* -- 如果不明白 CHARINDEX, LEFT, STUFF 怎麼運作的，可以把這塊註解拿掉看一下OUTPUT SELECT ID , input_date , CHARINDEX(@split_character, name + @split_character) - 1 , CAST ( LEFT(name, CHARINDEX(@split_character, name + @split_character) - 1) AS VARCHAR(200))\t-- 找到第一個分隔符號，然後用 LEFT 取出第一個分隔符號前的名字 , CHARINDEX(@split_character, name + @split_character)\t, STUFF(name, 1, CHARINDEX(@split_character, name + @split_character), '')\t-- 然後用 STUFF 把第一個分隔符號前的名字移除 , name FROM @temp_origin */  STRING_SPLIT 方法拆分 strings 如果你是 MSSQL 2016 之後的版本，你可以使用 STRING_SPLIT ，在剛剛的同一篇 stackoverflow 裡面第二個回覆就有說明如何使用\nSELECT ID , input_date , cs.Value --SplitData FROM @temp_origin CROSS APPLY STRING_SPLIT (name, @split_character) cs  測試結果\n","description":"","tags":["MSSQL","Function","MSSQL 2008","MSSQL 2017","Split string"],"title":"MSSQL - 拆分分隔符號變成多筆row","uri":"/zh-tw/posts/mssql-split-comma-separated-string-into-rows/"},{"categories":["MSSQL"],"content":"Function 給定起始\u0026結束日期，取得連續的每月月初跟每月月尾。\nCode 在此。\n/* ============================================= Author:\tstarspiritstorm Create date: 2021-08-17 Description: A Function of generating continuous sequenced start of month and end of month from a date range Reference: https://stackoverflow.com/questions/21189369/better-way-to-generate-months-year-table https://stackoverflow.com/questions/1520789/how-can-i-select-the-first-day-of-a-month-in-sql?page=1\u0026tab=votes#tab-top https://stackoverflow.com/questions/1051488/get-the-last-day-of-the-month-in-sql CTE version https://stackoverflow.com/questions/33510077/sql-split-period-by-months ============================================= */ CREATE FUNCTION [dbo].[F_Get_Sequenced_MonthStart_And_MonthEnd] ( @FromDate DATETIME , @ToDate DATETIME , @UpdateBeginDate BIT , @UpdateEndDate BIT ) RETURNS @Results TABLE ( MonthStart DATETIME , MonthEnd DATETIME , TheMonth VARCHAR(2) , TheYear VARCHAR(4) ) AS BEGIN -- Months in that period INSERT INTO @Results SELECT TOP (DATEDIFF(MONTH, @FromDate, @ToDate)+1) -- calculate how many rows needed DATEADD(MONTH, number, @FromDate) , DATEADD(MONTH, number, @FromDate) , MONTH(DATEADD(MONTH, number, @FromDate)) , YEAR(DATEADD(MONTH, number, @FromDate)) FROM [master].dbo.spt_values WHERE [type] = N'P' ORDER BY number /*\t藉由 MSSQL 的系統 table，[master].dbo.spt_values 取得連續的數字，數字總共有2048個 (0~2047) 月份的情況下，可以有170年的間距，所以可以放心地使用 */ -- Update first date of month and last date of month for each row UPDATE @Results SET MonthStart = DATEADD(MONTH, DATEDIFF(MONTH, 0, MonthStart), 0) , MonthEnd = DATEADD(MONTH, ((YEAR(MonthEnd) - 1900) * 12) + MONTH(MonthEnd), -1) /* MonthStart 先取得從 1900-01-01 (0代表1900-01-01) 到當筆記錄 MonthStart 的月份差 ( DATEDIFF 的部分) 再從 1900-01-01 加上剛算完的月份差 ( DATEADD 的部分) MonthEnd NOTE: -1 means 1899-12-31 先取得從當筆記錄 MonthEnd 的年份差後*12 再加上當筆的月份 (中間計算的部分) 再從 1899-12-31 加上剛算完的月份差 ( DATEADD 的部分) MonthEnd 的另一種寫法，如果你有保留 Function 內的 TheYear and TheMonth 的欄位，MonthEnd 可以改寫成下面的樣式 MonthEnd = DATEADD(MONTH, ((TheYear - 1900) * 12) + TheMonth, -1) MonthEnd 的另一種寫法，但我不是很喜歡+1、-1的寫法，還需要腦內轉換。 MonthEnd = DATEADD(MONTH, DATEDIFF(MONTH, 0, MonthEnd) + 1, -1) */ IF @UpdateBeginDate = 1 BEGIN UPDATE @Results SET MonthStart = @FromDate WHERE MonthStart = (SELECT MIN(MonthStart) FROM @Results) END IF @UpdateEndDate = 1 BEGIN UPDATE @Results SET MonthEnd = @ToDate WHERE MonthEnd = (SELECT MAX(MonthEnd) FROM @Results) END RETURN END  測試結果\n","description":"","tags":["MSSQL","Function","MSSQL 2008","MSSQL 2017","Monthly date"],"title":"MSSQL - 給定起始\u0026結束日期，取得連續的每月月初跟每月月尾","uri":"/zh-tw/posts/mssql-get-continuous-sequenced-start-of-month-and-end-of-month-from-a-date-range/"},{"categories":["hugo"],"content":"Config.toml 設定教學。\nConfig.toml setting Modified date 找到 # Modified date\n[frontmatter] lastmod = [\"lastmod\", \":git\", \":fileModTime\", \":default\"]  修改成\n[frontmatter] date = ['date', 'publishDate', 'lastmod'] expiryDate = ['expiryDate'] lastmod = [\"lastmod\", \":fileModTime\", \":git\", \":default\"] publishDate = ['publishDate', 'date']  原本給的設定順序是 [“lastmod”, “:git”, “:fileModTime”, “:default”]，\n這邊調整成 [“lastmod”, “:fileModTime”, “:git”, “:default”]。\nAuthor’s information 找到 # Author’s information\n調整成你自己的內容\nSite Info 找到 # Site Info\n調整成你自己的內容\nPost Share 找到 # Post Share\n調整成想要 share 的連結\nFooter icon url changing 最後就是 footer 的圖要換連結\n找到 theme/meme/data 裡面的 Socials.toml\n複製一份到你的 myblog/data\n並修改連結改為你自己的相關的連結\nReference Hugo setting configuration\n","description":"","tags":["hugo","theme-meme","config.toml"],"title":"Setting config.toml","uri":"/zh-tw/posts/setting-config.toml/"},{"categories":["hugo"],"content":"在 Github Pages 上建立 Hugo。\n建立 Hugo Site 本地端 先到你喜歡的資料夾裡面，開啟 git bash\nhugo 的產生 hugo site 相關內容的指令\nhugo new site myblog  進入剛剛創好的\ncd myblog/  安裝 Hugo Theme - meme 可以到 hugoranked 看星星數多的，\n或是直接到 hugo 的官方網站 的theme挑選喜歡的主題，\n這邊我挑的是 theme/meme，\n不同的 theme 請看各個 theme 的教學引導。\n利用 git 取得 theme meme\ngit init git submodule add --depth 1 https://github.com/reuixiy/hugo-theme-meme.git themes/meme  套用 hugo theme meme 的config.toml\nrm config.toml \u0026\u0026 cp themes/meme/config-examples/en/config.toml config.toml  修改 config.toml 的 baseurl = “https://[your_github_username].github.io/”\n例：https://starspiritstorm.github.io/\n產生簡單的 post\u0026about\nhugo new \"posts/hello-world.md\" hugo new \"about/_index.md\"  這邊有一點要注意的是，hugo new 產生的文章預設 draft 都是 true，用 notepad++ 開啟，\n並把 draft 設定改成 false 才會真正的在 Github Pages 上顯示出來。\n路徑在分別在\nmyblog\\content\\posts\nmyblog\\content\\about\n本地端檢驗 Hugo site 開啟\nhugo server -D  到瀏覽器 URL 輸入\nhttp://localhost:1313/  檢查本地端是否能成功看到剛剛建好的網頁\n部屬至 Github Pages 先產生 Github Pages 的 repository 先去 github 產生你的 Github Pages 需要用到的 repository。\nrepository 的名字必須是 “[你的github帳號].github.io”。\n在 myblog 下，產生 hugo 的 public 資料夾 再回到剛剛創好的 myblog 路徑下，直接執行\nhugo  會看到 public 資料夾產生，然後進入 public 資料夾\ncd public/  public 資料夾是 hugo for Github Pages 靜態頁面用的，也就是\nhttps://github.com/[你的帳號]/[你的帳號].github.io\n這個 repository 要用的。\n在 public 資料夾，開啟 git，要上 github 用的 接下來要在 public 資料夾裡面開 git 才能推到 github 上。\ngit init git remote add origin https://github.com/[你的帳號]/[你的帳號].github.io  例：git remote add origin https://github.com/starspiritstorm/starspiritstorm.github.io\ngit add . git commit -m \"Initial commit\" git push --set-upstream origin master  到 github 網頁設定 Source 推完之後還需要去設定。\nSettings \u003e Options \u003e Github Pages \u003e Source to “master branch”\n推完之後就可以到 你的 Github Pages (https://[你的帳號].github.io/) 看看結果了。\nGithub Pages hugo source code 產生 Github Pages source code 的 repository 這邊要注意的是，所有文章的 source code 還是存放在你的本地端， 剛剛的 Github Pages 實際上只有上傳了 public 資料夾內的東西到你的 Github Pages 的 repository。\n所以還需要再開另外一個 github repository，來儲存你的 source code， 步驟跟剛剛開 Github Pages 的方法一樣，名稱可以自己取一個喜歡的，這邊我是直接這樣取。\nhttps://github.com/[你的帳號]/[你的帳號]_githubpages_source  例：https://github.com/starspiritstorm/starspiritstorm_githubpages_source\n回 myblog 資料夾，開啟 git，要上 github_source_code 用的 創好之後再回到 myblog 資料夾重新開一個 git bash。\n然後產生一個 gitignore 把 public 資料夾排除，因為 public 是 hugo build 出來的產物\necho \"public/\" \u003e\u003e .gitignore  然後做一樣的事情把你的 source code 推到新的 repository。\ngit init git remote add origin https://github.com/[你的帳號]/[你的帳號]_githubpages_source  例：git remote add origin https://github.com/starspiritstorm/starspiritstorm_githubpages_source\ngit add . git commit -m \"Add hugo source code\" git push --set-upstream origin master  自動化部屬 (GitHub Action)，只要推 source code，就會幫你更新 Github Pages Submodule 要產一個 public 出來 最後一步驟，藉由 GitHub Action 來做自動化部署。\n為了後面要能自動化部署，需要先產生 submodule public 預備著1。\ngit submodule add -f --depth 1 https://github.com/[你的帳號]/[你的帳號].github.io.git public  例：git submodule add -f –depth 1 https://github.com/starspiritstorm/starspiritstorm.github.io.git public\n產生完之後記得 commit \u0026 push。\n產生 github Personal Access Token 先到 這個頁面 ，產生 Personal Access Token (PAT)。\n名稱可以自取，過期時間先選 No expired，因為也只會給 workflow 用，如果之後有疑慮可以重新產生 token。\n勾選 workflow\n拉到下面按產生\n產生完以後先複製token的值\n到存放你 source code 的 repository 去設定剛剛產生好的 token\nSettings \u003e Secret \u003e New repository secret\n取名 HUGO_DEPLOY_TOKEN，並貼上剛剛複製的token的值\n設定 GitHub Action 的 workflow 到 Github Action 頁面，點選 set up a workflow your self\n在左邊 Edit New file 裡面把下面的 script 貼上後， 記得把 external_repository 修改成你的 Github Pages 的 repository。\n按下 start commit 後等他跑完。\nname: hugo CI on: push: branches: [ master ] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 with: submodules: true fetch-depth: 1 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: 'latest' extended: true - name: Build run: hugo - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: #[2]：這邊名稱要填入剛剛在 secret 產生的 token 的名稱，此行記得刪除 personal_token: ${{ secrets.HUGO_DEPLOY_TOKEN }} #[3]：這邊要輸入的是你的 Github Pages 的 repo，此行記得刪除 external_repository: starspiritstorm/starspiritstorm.github.io publish_branch: master publish_dir: ./public commit_message: ${{ github.event.head_commit.message }} # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones TZ: Asia/Taipei    [2] 難點2:\n當初不知道那個「secrets.後面這串」是要填剛剛在 secret 產生的 token 的名稱。\n就在 Action 的 Deploy 裡面遇到錯誤。\nError: Action failed with “not found deploy key or tokens”\n  [3] 難點3:\n這邊原本我複製 Github Pages 的時候多複製到了.git，變成 starspiritstorm/starspiritstorm.github.io.git。\n結果就在 Action 的 Deploy 裡面遇到錯誤。\nremote: Repository not found.\nfatal: repository ‘https://github.com/starspiritstorm/starspiritstorm.github.io.git.git/' not found\nError: Action failed with “The process ‘/usr/bin/git’ failed with exit code 128”\n  最後看到 source code 的 Action 畫面成功地顯示 build 綠勾勾，就代表你成功的建立好流程了。\n自動化部屬測試 之後只需要在 source code 的 repository 新增 post 就會自動更新到 Github Pages 上了。\n一樣在 myblog 資料夾開 Git Bash，然後 hugo new 一個 post。\n然後 commit 之後 push 到 origin，再去 Action 看，可以看到成功的內容。\n然後可以再去你的 Github Pages 看看剛剛新增的 post。\n最後一個要注意的就是當初 config.toml 是直接複製範本過來用的，所以裡面有一些資訊要記得做修正。 請參考下篇文章。\nReference   theme meme 作者 reuixiy 的安裝教學\n  theme meme 的作者寫的「使用 GitHub Actions 部署 Hugo 博客到 GitHub Pages」\n  Github Action 的參考，不能完全照抄，會失敗…，組合起來嘗試才成功的\n  Create and host a blog with Hugo and GitHub Pages in less than 30 minutes\n如何將Hugo部落格部署到Github上?\n   難點1：Github Action 需要 submodule 裡面有 public 才能正常作業…不然會在 Github Action 時運作時，在 Run actions/checkout@v2 遇到 Error: fatal: No url found for submodule path ‘public’ in .gitmodules。  ↩︎\n  ","description":"","tags":["hugo","theme-meme","blog","github","github pages","github action"],"title":"在 Github Pages 上建立 Hugo","uri":"/zh-tw/posts/establish-hugo-site-on-githubpage/"},{"categories":["hugo"],"content":"安裝 Hugo。\n安裝 Hugo 裝完chocolatey後，開啟 powershell，然後輸入\nchoco install hugo -confirm  安裝好 hugo 後，安裝 hugo extended，輸入\nchoco install hugo-extended -confirm  結束。\n檢查 Hugo 版本及反安裝 Hugo 兩個簡單指令。\n檢查版本\nhugo version  反安裝Hugo\nchoco uninstall hugo  ","description":"","tags":["windows","hugo"],"title":"在 Windows 環境下安裝 Hugo","uri":"/zh-tw/posts/install-hugo-in-windows/"},{"categories":["chocolatey"],"content":"參考 Chocolatey 官方網站 How to uninstall\n移除 Chocolatey 移除步驟 1. 砍掉 Chocolatey 的資料夾 把安裝路徑的資料夾砍掉，通常在 C:\\ProgramData\\chocolatey，不確定在哪的話可以用這行指令\n$env:ChocolateyInstall  移除步驟 2. 環境變數移除 Chocolatey 砍掉資料夾以後，還有環境變數的設定要砍\n官方文件顯示有這幾項\nChocolateyInstall\nChocolateyToolsLocation\nChocolateyLastPathUpdate\nPATH (will need updated to remove)\n不過我這邊移除的時候沒看到 ChocolateyLastPathUpdate 就是了\n","description":"","tags":["windows","chocolatey"],"title":"在 Windows 環境下移除 Chocolatey","uri":"/zh-tw/posts/uninstall-chocolatey-in-windows/"},{"categories":["chocolatey"],"content":"為了安裝 Hugo，需要先安裝 Windows 用的套件管理軟體 Chocolatey\n本篇文章會介紹如何在 Windows 環境下安裝 Chocolatey\n安裝 Chocolatey 首先，要安裝 Chocolatey 就是要去他的官方網站\nchocolatey 官方網站\nchocolatey 安裝頁面\n安裝步驟 1. 用\"管理者權限\"開啟 Windows Power Shell 安裝頁面的指令需要用 Windows Power Shell 執行，Windows Power Shell 記得要用\"管理者權限\"開啟。\n安裝步驟 2. 執行 Chocolatey 官網提供的指令 根據 Chocolatey 的安裝指示，在安裝 Chocolatey 之前，最好先去 MSDN 確定一下你要的權限 level\n檢查目前 Power Shell 的設定可以用這行指令\nGet-ExecutionPolicy -list  接下來就跑 “run following command” 的指令\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))  注意它裡面有寫 Bypass，所以你的 Set-ExecutionPolicy 會被設定成 Bypass，-Scope Process 這段是表示設定只套用於 Process\n用 AllSigned 會有一堆詢問，看每個人的習慣自行決定要用 Bypass 還是 AllSigned，我比較懶所以就直接用 Bypass 了\n最後裝完以後就會看到 Chocolatey (choco.exe) is now ready\n","description":"","tags":["windows","chocolatey"],"title":"在 Windows 環境下安裝 Chocolatey","uri":"/zh-tw/posts/install-chocolatey-in-windows/"},{"categories":null,"content":"第二篇文章是用來測試 GitHub Action 的。\n直接推在 source code 的 repo 後， 由 GitHub Action 自動部署到 GitHub Pages 的 repo。\n","description":"","tags":null,"title":"本篇文章是由 GitHub Action 自動推到 GitHub Pages 的測試文章","uri":"/zh-tw/posts/auto-post-with-github-action/"},{"categories":null,"content":"第一篇Hugo\n","description":"","tags":null,"title":"Hello World","uri":"/zh-tw/posts/hello-world/"}]
